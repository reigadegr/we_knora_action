name: Release Build

on:
  workflow_dispatch:
    inputs:
      TOOLCHAINS:
        type: choice
        description: "使用的工具链"
        required: true
        default: "nightly"
        options:
          - "nightly"
          - "stable"
      TARGET:
        type: choice
        description: "编译的目标三元组"
        required: true
        default: "aarch64-unknown-linux-musl"
        options:
          - "aarch64-unknown-linux-musl"
          - "x86_64-unknown-linux-musl"
          - "x86_64-pc-windows-msvc"
          - "aarch64-apple-darwin"
          - "x86_64-apple-darwin"
      USE_O2:
        type: boolean
        description: "是否使用O2编译？(默认O3)"
        required: true
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize build performance
  CARGO_INCREMENTAL: 0
  TZ: Asia/Shanghai

jobs:
  # Build strategy check - determine build type based on trigger
  build-check:
    name: Build Strategy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Show Selected Inputs
        run: |
          echo "-----------------------"
          echo "Selected TOOLCHAINS: ${{ github.event.inputs.TOOLCHAINS }}"
          echo "Selected TARGET: ${{ github.event.inputs.TARGET }}"
          echo "-----------------------"

  # Build RustFS binaries
  build-utils:
    name: Build Utils
    needs: [build-check]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    env:
      RUSTFLAGS: ${{ matrix.cross == 'false' && '-C target-cpu=native' || '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'macos' || 'ubuntu') }}-latest
            target: ${{ github.event.inputs.TARGET }}
            cross: ${{ contains(github.event.inputs.TARGET, 'linux') && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Rust environment
        uses: ./.github/actions/setup
        with:
          rust-version: ${{ github.event.inputs.TOOLCHAINS }}
          target: ${{ matrix.target }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          install-cross-tools: ${{ matrix.cross }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Setup TimeZone
        if: runner.os == 'Linux'
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Clone utils sources
        shell: bash
        run: |
          git clone https://github.com/Tencent/WeKnora.git
          cd WeKnora
          cp .env.example .env

      - name: Build Start
        shell: bash
        run: |
          cd WeKnora
          ./scripts/start_all.sh
