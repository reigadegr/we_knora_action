# Copyright 2024 RustFS Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Setup Rust Environment"
description: "Setup Rust development environment with caching for RustFS"

inputs:
  rust-version:
    description: "Rust version to install"
    required: false
    default: "stable"
  install-cross-tools:
    description: "Install cross-compilation tools"
    required: false
    default: "false"
  target:
    description: "Target architecture to add"
    required: false
    default: ""
  github-token:
    description: "GitHub token for API access"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          musl-tools \
          build-essential \
          lld \
          llvm \
          clang \
          libdbus-1-dev \
          libwayland-dev \
          libwebkit2gtk-4.1-dev \
          libxdo-dev \
          pkg-config \
          libssl-dev \
          linux-modules-extra-"$(uname -r)"
        
    - name: Optimize Memory Management
      if: runner.os == 'Linux'
      shell: bash
      run: |
         sudo -E sysctl vm.swappiness=1
         sudo -E sysctl vm.min_free_kbytes=32768
         sudo -E sysctl vm.watermark_scale_factor=100
         sudo -E sysctl vm.watermark_boost_factor=15000
         sudo -E sysctl vm.overcommit_memory=1
         sudo -E sysctl vm.page-cluster=0
         sudo -E modprobe zram
         echo "0" | sudo -E tee /sys/class/block/zram0/mem_limit
         echo "zstd" | sudo -E tee /sys/class/block/zram0/comp_algorithm
         echo "$(awk 'NR==1{print $2*1000}' </proc/meminfo)" | sudo -E tee /sys/class/block/zram0/disksize
         sudo -E mkswap /dev/zram0
         sudo -E swapon -p 100 /dev/zram0
         echo "Y" | sudo -E tee /sys/kernel/mm/lru_gen/enabled
         echo "1000" | sudo -E tee /sys/kernel/mm/lru_gen/min_ttl_ms
         echo "1" | sudo -E tee /sys/kernel/mm/swap/vma_ra_enabled

    - name: Install protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "31.1"
        repo-token: ${{ inputs.github-token }}

    - name: Install flatc
      uses: Nugine/setup-flatc@v1
      with:
        version: "25.2.10"

    - name: Install Zig
      if: inputs.install-cross-tools == 'true'
      uses: mlugg/setup-zig@v2

    - name: Setup rust musl toolchains
      shell: bash
      run: |
        # curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain "${{ inputs.rust-version }}" --profile minimal -y
        if [ "${{ inputs.rust-version }}" = "nightly" ]; then
            toolchain="nightly"
        else
            toolchain="stable"
        fi
        rustup default "$toolchain"
        rustup component add rust-src llvm-tools-preview clippy rustfmt

        rustup target add "${{ inputs.target }}" --toolchain "$toolchain"

        rustc -Vv
        cargo -V

    # - name: Install zig
      # if: inputs.install-cross-tools == 'true'
      # continue-on-error: true
      # shell: bash
      # run: |
        # platform="${{ contains(inputs.target, 'windows') && 'windows' || (contains(inputs.target, 'apple') && 'macos' || 'linux') }}"        
        # # zig_url=$(curl -s https://ziglang.org/download/ | grep -oP "https://ziglang.org/builds/zig-x86_64-${platform}-[^\"]+\.tar\.xz" | head -n 1)
        # zig_url=$(curl -s https://ziglang.org/download/   | grep -oP 'https://ziglang.org/builds/zig-x86_64-[^"]+' | grep "${platform}" | grep -v minisig | awk 'NR==1{print $1}')
        # echo $zig_url
        # curl -L $zig_url -o "$(basename $zig_url)"
        # tar -xvf "$(basename $zig_url)" >/dev/null
        # zig_elf="$(find ./*/zig)"
        # sudo -E rm -rf /usr/lib/zig
        # sudo -E mkdir -p /usr/lib/zig
        # sudo -E cp -arf ./*/lib/* /usr/lib/zig
        # ls /usr/lib/zig
        # file $zig_elf
        # sudo -E cp -af $zig_elf "$(which zig)"
        # zig version
        # zig cc -v

    - name: Install cargo-zigbuild
      if: inputs.install-cross-tools == 'true'
      shell: bash
      run: |
        git clone --depth 1 https://github.com/rust-cross/cargo-zigbuild
        cd cargo-zigbuild
        cargo add mimalloc --features no_thp,override,v3
        wget https://github.com/reigadegr/shimmy_action/raw/main/patchs/zigbuild_mimalloc.patch
        patch -p2 -F 3 < zigbuild_mimalloc.patch
        cargo update
        cargo build -r
        dd if=target/release/cargo-zigbuild of=./cargo-zigbuild
        rm -rf target
        sudo -E cp -af ./cargo-zigbuild ~/.cargo/bin/cargo-zigbuild
        sudo -E chmod +x ~/.cargo/bin/cargo-zigbuild
        ls ~/.cargo/bin
        which cargo-zigbuild || true
        cd  ..; rm -rf cargo-zigbuild

    - name: Setup NASM
      if: runner.os == 'Windows'
      uses: ilammy/setup-nasm@v1
      with:
        version: '2.16.01'

    - name: reinstall self code
      shell: bash
      run: |
        git clone --depth 1 https://github.com/reigadegr/shimmy_action shimmy_action_sources
        cp -rf shimmy_action_sources/*  .
        cp -rf shimmy_action_sources/.*  . || echo "可能是macos，不需要单独cp.*"
        rm -rf shimmy_action_sources
